# ü§ñ Cursor AI Rules - Boom Karaoke Booking System

## üö® **PRIMARY RULE: ALWAYS FOLLOW DOCUMENTATION**

**MANDATORY FOR CURSOR AI**: You MUST strictly follow the consolidated documentation in `/docs/` folder. This is non-negotiable.

---

## üìö **Documentation Hierarchy (Follow in Order)**

### **1. Before ANY Code Generation:**
- **MUST READ**: `docs/DEVELOPMENT_RULES.md` - Documentation-first development rules
- **MUST READ**: `docs/SYSTEM_OVERVIEW.md` - Complete system architecture
- **MUST READ**: `docs/development/DEVELOPMENT_GUIDE_2025.md` - Development standards
- **MUST READ**: `docs/deployment/DEPLOYMENT_GUIDE_2025.md` - Deployment procedures
- **MUST READ**: `docs/business/BUSINESS_ROADMAP_2025.md` - Business priorities

---

## üéØ **Cursor AI Requirements**

### **Before Making ANY Suggestions:**
1. **Reference relevant documentation sections** - Cite specific docs
2. **Follow documented patterns exactly** - No custom patterns
3. **Use only documented technologies** - Vercel + Neon PostgreSQL ONLY
4. **Implement documented security measures** - All security required
5. **Align with business roadmap priorities** - Follow documented strategy
6. **Use multi-personality mode** - Always discuss with different expert perspectives
7. **Track development status and big picture** - Maintain context awareness
8. **Use MCP tools when available** - Leverage automation and monitoring tools

### **Code Generation Rules:**
- ‚úÖ **Always cite documentation** - "As per DEVELOPMENT_GUIDE_2025.md section X..."
- ‚úÖ **Follow exact API patterns** - Use documented endpoint structures
- ‚úÖ **Use documented database schema** - Exact table structures only
- ‚úÖ **Implement documented security** - JWT, validation, SQL injection prevention
- ‚úÖ **Follow documented deployment** - Vercel + Neon procedures only
- ‚úÖ **Use MCP tools for automation** - Database, API testing, deployment automation

### **Architecture Compliance:**
- ‚úÖ **Frontend**: React 18 + Vite + Tailwind CSS
- ‚úÖ **Backend**: Vercel Serverless Functions
- ‚úÖ **Database**: Neon PostgreSQL (serverless)
- ‚úÖ **Authentication**: JWT tokens
- ‚úÖ **Hosting**: Vercel (unified platform)
- ‚úÖ **MCP Tools**: Database automation, API testing, deployment automation

---

## üß† **Multi-Personality Mode Requirements**

### **MANDATORY: Always Use Multi-Personality Analysis**

**Before making ANY suggestions, Cursor AI MUST engage in multi-personality mode discussion with these expert perspectives:**

#### **1. Security Expert üîí**
- **Focus**: Security vulnerabilities, authentication, data protection
- **Questions to Address**: Are there security risks? Is authentication proper? Is data protected?
- **Responsibilities**: Verify JWT implementation, input validation, SQL injection prevention

#### **2. Frontend Developer ‚öõÔ∏è**
- **Focus**: React components, user experience, performance
- **Questions to Address**: Is the UI intuitive? Are components optimized? Is UX smooth?
- **Responsibilities**: Component structure, state management, responsive design

#### **3. Backend Developer üõ†Ô∏è**
- **Focus**: API design, database operations, server logic
- **Questions to Address**: Are APIs RESTful? Is database optimized? Is logic efficient?
- **Responsibilities**: API endpoints, database queries, business logic

#### **4. DevOps Engineer üöÄ**
- **Focus**: Deployment, infrastructure, monitoring, scalability
- **Questions to Address**: Is deployment smooth? Is infrastructure scalable? Is monitoring adequate?
- **Responsibilities**: Vercel deployment, Neon database, performance optimization

#### **5. Business Analyst üíº**
- **Focus**: Business requirements, user needs, market fit
- **Questions to Address**: Does this meet business goals? Will users benefit? Is it market-ready?
- **Responsibilities**: Feature prioritization, user stories, business value

#### **6. QA Engineer üß™**
- **Focus**: Testing, quality assurance, bug prevention
- **Questions to Address**: Is it testable? Are edge cases covered? Is quality assured?
- **Responsibilities**: Test coverage, error handling, quality gates

### **Multi-Personality Discussion Format:**
```
üîí Security Expert: "I see potential security issues with..."
‚öõÔ∏è Frontend Developer: "The UI component needs..."
üõ†Ô∏è Backend Developer: "The API endpoint should..."
üöÄ DevOps Engineer: "Deployment considerations include..."
üíº Business Analyst: "Business impact analysis shows..."
üß™ QA Engineer: "Testing requirements are..."

ü§ñ Final Recommendation: "After multi-personality analysis..."
```

---

## üìä **Development Status & Big Picture Tracking**

### **MANDATORY: Always Track Development Context**

#### **Current Development Status (September 2025):**
- **Architecture**: ‚úÖ **COMPLETED** - Vercel + Neon PostgreSQL
- **Authentication**: ‚úÖ **COMPLETED** - JWT implementation
- **Database Schema**: ‚úÖ **COMPLETED** - PostgreSQL tables and indexes
- **Basic API**: ‚úÖ **COMPLETED** - Health, auth, rooms, business-hours endpoints
- **Frontend Structure**: ‚úÖ **COMPLETED** - React components and routing
- **MCP Tools**: ‚úÖ **COMPLETED** - Database automation, API testing, deployment automation

#### **Critical Gaps (Per BUSINESS_ROADMAP_2025.md):**
- ‚ùå **Booking System API** - CRUD operations for bookings
- ‚ùå **Real-time Updates** - Live availability updates
- ‚ùå **Stripe Integration** - Payment processing
- ‚ùå **Landing Page** - Marketing website

#### **Current Phase (Week 3-4):**
- **Focus**: Core Features Completion
- **Priority**: Booking API and Real-time Updates
- **Timeline**: 2 weeks to complete core features
- **Goal**: $2,000 MRR by Month 3

### **Big Picture Context Requirements:**

#### **Before ANY Suggestions, Consider:**
1. **Current Phase**: What phase are we in? (Foundation, Core Features, Launch, etc.)
2. **Priority Level**: Is this high, medium, or low priority for current phase?
3. **Dependencies**: What needs to be completed first?
4. **Business Impact**: How does this affect revenue goals?
5. **Technical Debt**: Will this create or reduce technical debt?
6. **User Value**: How does this benefit end users?
7. **Timeline Impact**: Will this accelerate or delay the roadmap?

#### **Development Momentum Tracking:**
- **Completed Features**: Track what's done and working
- **In Progress**: What's currently being developed
- **Blocked Items**: What's waiting for dependencies
- **Next Priorities**: What should be tackled next
- **Risk Factors**: What could derail the timeline

#### **Context Awareness Questions:**
- "What's the current development phase?"
- "What are the highest priority items right now?"
- "What dependencies need to be resolved first?"
- "How does this align with the business roadmap?"
- "What's the expected timeline impact?"
- "Are we on track for revenue goals?"

---

## üîß **MCP Tools Integration**

### **MANDATORY: Use Available MCP Tools**

**Cursor AI MUST leverage the following MCP tools when available:**

#### **1. Database Automation MCP**
- **Purpose**: Automated database operations, migrations, monitoring
- **Usage**: Health checks, migrations, optimization, backups
- **Integration**: Use for database-related tasks and monitoring

#### **2. API Testing MCP**
- **Purpose**: Automated API testing and validation
- **Usage**: Endpoint testing, integration testing, performance testing
- **Integration**: Use for API development and testing

#### **3. Deployment Automation MCP**
- **Purpose**: Automated deployment and infrastructure management
- **Usage**: Vercel deployments, environment management, monitoring
- **Integration**: Use for deployment-related tasks

#### **4. Business Intelligence MCP**
- **Purpose**: Analytics, reporting, business metrics
- **Usage**: Performance monitoring, user analytics, business insights
- **Integration**: Use for business intelligence and analytics

#### **5. Security Monitoring MCP**
- **Purpose**: Security monitoring, threat detection, compliance
- **Usage**: Security audits, vulnerability scanning, compliance checks
- **Integration**: Use for security-related tasks

#### **6. GitHub Automation MCP**
- **Purpose**: GitHub repository management, CI/CD, issue tracking
- **Usage**: Repository operations, pull requests, issue management
- **Integration**: Use for version control and collaboration

#### **7. Filesystem Automation MCP**
- **Purpose**: File operations, project management, organization
- **Usage**: File management, project structure, documentation
- **Integration**: Use for project organization and file operations

#### **8. PostgreSQL Automation MCP**
- **Purpose**: Direct PostgreSQL operations and monitoring
- **Usage**: Database queries, schema management, performance monitoring
- **Integration**: Use for direct database operations

#### **9. Vercel Automation MCP**
- **Purpose**: Vercel platform management and deployment
- **Usage**: Deployment management, environment configuration, monitoring
- **Integration**: Use for Vercel-specific operations

### **MCP Tools Usage Guidelines:**
- ‚úÖ **Use MCP tools for automation** - Don't do manually what can be automated
- ‚úÖ **Leverage monitoring tools** - Use for health checks and performance monitoring
- ‚úÖ **Utilize testing tools** - Use for automated testing and validation
- ‚úÖ **Apply deployment tools** - Use for streamlined deployment processes
- ‚úÖ **Monitor security tools** - Use for security monitoring and compliance

---

## üîç **Local Version Documentation & Migration Rules**

### **MANDATORY: Reference Local Version Documentation for Data Issues**

**When encountering ANY data-related issues during Vercel + Neon migration, Cursor AI MUST:**

#### **1. Back-Trace Logical Functions:**
- **Reference**: `docs/business/function-network.md`
- **Purpose**: Understand function relationships and dependencies
- **Usage**: When API endpoints or functions behave unexpectedly
- **Example**: "As per function-network.md, this endpoint depends on..."

#### **2. Analyze Data Flow Issues:**
- **Reference**: `docs/business/full-stack-data-flow.md`
- **Purpose**: Trace complete data flow from frontend to database
- **Usage**: When data doesn't flow correctly between components
- **Example**: "According to full-stack-data-flow.md, the data should..."

#### **3. Check Communication Patterns:**
- **Reference**: `docs/business/communication-network.md`
- **Purpose**: Understand API communication patterns
- **Usage**: When API calls fail or behave inconsistently
- **Example**: "Per communication-network.md, the API pattern should..."

#### **4. Verify Architecture Alignment:**
- **Reference**: `docs/business/architecture-overview.md`
- **Purpose**: Ensure current implementation matches documented architecture
- **Usage**: When architectural decisions need validation
- **Example**: "As documented in architecture-overview.md, this component..."

#### **5. Follow Migration Procedures:**
- **Reference**: `docs/business/database-migration-plan.md`
- **Purpose**: Follow proper migration procedures
- **Usage**: When database operations fail or data is inconsistent
- **Example**: "Following database-migration-plan.md, the migration step..."

### **Migration Context Awareness:**

#### **Current Migration Status (Per MASTER_PLAN_ADJUSTMENTS_2025.md):**
- **Status**: 75% Adapted to Vercel + Neon Architecture
- **Critical Gaps**: Missing core features, real-time capabilities
- **Current Phase**: Week 3 - Core Features Completion
- **Priority**: Booking System API and Real-time Updates

#### **When Data Issues Occur:**
1. **Check Master Plan Status**: Reference `MASTER_PLAN_ADJUSTMENTS_2025.md`
2. **Verify Current Phase**: Understand what should be working vs. what's in progress
3. **Back-Trace from Local Docs**: Use business documentation to understand expected behavior
4. **Compare with Current State**: Identify discrepancies between documented and actual behavior
5. **Provide Contextual Solution**: Suggest fixes that align with current development phase

### **Master Plan Integration:**

#### **Always Consider Master Plan Context:**
- **Current Week**: Week 3 (Core Features Completion)
- **Expected Status**: Booking API should be in progress, not complete
- **Priority Order**: Booking System ‚Üí Real-time Updates ‚Üí Subscription Model
- **Timeline Impact**: Any delays affect Week 4 (Subscription Model) and Week 5 (Launch)

#### **Master Plan References:**
- **MASTER_PLAN_ADJUSTMENTS_2025.md**: Current status, gaps, and adjusted timeline
- **MASTER-DEVELOPMENT-ROADMAP.md**: Overall strategy and phase progression
- **Business Documentation**: Local version functions, data flow, and architecture

### **Data Issue Resolution Process:**

#### **When Encountering Data Issues:**
1. **Reference Master Plan**: Check current phase and expected status
2. **Back-Trace from Local Docs**: Use business documentation to understand expected behavior
3. **Identify Migration Gap**: Determine if issue is due to incomplete migration
4. **Provide Phase-Appropriate Solution**: Suggest fixes that align with current development phase
5. **Consider Timeline Impact**: Ensure solution doesn't delay master plan milestones

#### **Example Response Format for Data Issues:**
```
## üìä Master Plan Context
**Current Phase**: Week 3 - Core Features Completion (Per MASTER_PLAN_ADJUSTMENTS_2025.md)
**Expected Status**: Booking API in progress, not complete
**Priority**: High - Critical for Week 4 Subscription Model

## üîç Local Documentation Analysis
**Reference**: `docs/business/function-network.md` shows this function should...
**Data Flow**: `docs/business/full-stack-data-flow.md` indicates the data path...
**Architecture**: `docs/business/architecture-overview.md` specifies this component...

## üéØ Migration-Aware Solution
[Solution that considers current migration status and master plan timeline]
```

---

## üö´ **Prohibited AI Suggestions**

### **NEVER SUGGEST:**
- ‚ùå **Railway, Render, or other platforms** - Vercel + Neon ONLY
- ‚ùå **Custom deployment configurations** - Follow deployment guide exactly
- ‚ùå **New patterns not in documentation** - Use documented patterns only
- ‚ùå **Technologies not in documentation** - Use documented tech stack only
- ‚ùå **Security shortcuts or bypasses** - Implement all documented security
- ‚ùå **Alternative architectures** - Use documented architecture only
- ‚ùå **Outdated information** - Reference 2025 documentation only
- ‚ùå **Manual processes when MCP tools available** - Use automation tools

---

## ‚úÖ **Required AI Practices**

### **ALWAYS DO THESE:**
- ‚úÖ **Read relevant documentation before suggesting code**
- ‚úÖ **Reference specific documentation sections in responses**
- ‚úÖ **Follow documented patterns exactly as specified**
- ‚úÖ **Use documented database schema without modifications**
- ‚úÖ **Implement documented security measures without shortcuts**
- ‚úÖ **Suggest only documented technologies (Vercel + Neon PostgreSQL)**
- ‚úÖ **Verify compliance with documentation before suggesting**
- ‚úÖ **Prioritize documented solutions over custom approaches**
- ‚úÖ **Use MCP tools for automation and monitoring**
- ‚úÖ **Leverage available automation tools**

---

## üîç **AI Compliance Verification**

### **Before Every Response, Verify:**
- [ ] I used multi-personality mode analysis (6 expert perspectives)
- [ ] I tracked development status and big picture context
- [ ] I referenced relevant documentation before suggesting
- [ ] My suggestion follows documented patterns exactly
- [ ] My suggestion uses only documented technologies
- [ ] My suggestion implements documented security measures
- [ ] My suggestion aligns with business roadmap priorities
- [ ] I considered current development phase and priorities
- [ ] I checked for phase advancement criteria
- [ ] I cited specific documentation sections
- [ ] I verified compliance before suggesting
- [ ] I prioritized documented solutions
- [ ] I referenced master plan documents for context
- [ ] I used local version documentation for data issues
- [ ] I considered migration status and timeline impact
- [ ] I assessed project maturity for phase advancement
- [ ] I used MCP tools when available for automation

---

## üìã **Documentation References**

### **Key Documentation Files:**
- `docs/DEVELOPMENT_RULES.md` - **MANDATORY** - Development rules
- `docs/SYSTEM_OVERVIEW.md` - System architecture and features
- `docs/development/DEVELOPMENT_GUIDE_2025.md` - Development standards
- `docs/deployment/DEPLOYMENT_GUIDE_2025.md` - Deployment procedures
- `docs/business/BUSINESS_ROADMAP_2025.md` - Business strategy
- `docs/troubleshooting/TROUBLESHOOTING_GUIDE.md` - Issue resolution

### **Master Plan Documents (MANDATORY REFERENCE):**
- `docs/business/Scale Up Plan/MASTER_PLAN_ADJUSTMENTS_2025.md` - **CRITICAL** - Current status and gaps
- `docs/business/Scale Up Plan/MASTER-DEVELOPMENT-ROADMAP.md` - **CRITICAL** - Overall development strategy
- `docs/business/` - **LOCAL VERSION DOCUMENTATION** - Back-trace logical functions and effects

### **Local Version Documentation (For Migration Issues):**
- `docs/business/function-network.md` - Function relationships and dependencies
- `docs/business/full-stack-data-flow.md` - Complete data flow documentation
- `docs/business/communication-network.md` - API communication patterns
- `docs/business/architecture-overview.md` - System architecture details
- `docs/business/database-migration-plan.md` - Database migration procedures
- `docs/business/ai-integration-blueprint.md` - AI integration specifications

### **Current Architecture (September 2025):**
- **Frontend**: React 18 + Vite + Tailwind CSS
- **Backend**: Vercel Serverless Functions
- **Database**: Neon PostgreSQL (serverless)
- **Authentication**: JWT tokens
- **Hosting**: Vercel (unified platform)
- **MCP Tools**: Database automation, API testing, deployment automation
- **Status**: Production Ready

---

## üìÅ **Complete Documentation Folder Structure**

### **MANDATORY: Understand the Complete `/docs/` Organization**

**The `/docs/` folder is organized into 5 main categories with specific purposes:**

#### **1. Root Level Documentation**
```
docs/
‚îú‚îÄ‚îÄ README.md                    # Documentation index and navigation
‚îú‚îÄ‚îÄ DEVELOPMENT_RULES.md         # MANDATORY development rules
‚îî‚îÄ‚îÄ SYSTEM_OVERVIEW.md           # Complete system overview
```

#### **2. Business Documentation (`/docs/business/`)**
**Purpose**: Business strategy, architecture planning, and migration context

```
docs/business/
‚îú‚îÄ‚îÄ BUSINESS_ROADMAP_2025.md     # Current business strategy
‚îú‚îÄ‚îÄ Scale Up Plan/               # Master plan documents
‚îÇ   ‚îú‚îÄ‚îÄ MASTER_PLAN_ADJUSTMENTS_2025.md    # CRITICAL - Current status
‚îÇ   ‚îú‚îÄ‚îÄ MASTER-DEVELOPMENT-ROADMAP.md      # CRITICAL - Overall strategy
‚îÇ   ‚îú‚îÄ‚îÄ business-strategy-roadmap.md       # Business strategy details
‚îÇ   ‚îú‚îÄ‚îÄ calendar-app-launch-plan.md        # Launch planning
‚îÇ   ‚îú‚îÄ‚îÄ development-plan-master.md         # Development planning
‚îÇ   ‚îú‚îÄ‚îÄ infrastructure-requirements.md     # Infrastructure needs
‚îÇ   ‚îú‚îÄ‚îÄ risk-mitigation-plan.md            # Risk management
‚îÇ   ‚îú‚îÄ‚îÄ strategic-pivot-analysis.md        # Strategic analysis
‚îÇ   ‚îú‚îÄ‚îÄ testing-strategy.md                # Testing approach
‚îÇ   ‚îî‚îÄ‚îÄ ux-design-system.md                # Design system
‚îú‚îÄ‚îÄ ai-integration-blueprint.md  # AI integration planning
‚îú‚îÄ‚îÄ architecture-overview.md     # System architecture details
‚îú‚îÄ‚îÄ calendar-booking-baseline.md # Baseline requirements
‚îú‚îÄ‚îÄ communication-network.md     # API communication patterns
‚îú‚îÄ‚îÄ database-migration-plan.md   # Database migration procedures
‚îú‚îÄ‚îÄ development-roadmap.md       # Development roadmap
‚îú‚îÄ‚îÄ full-stack-data-flow.md      # Complete data flow documentation
‚îú‚îÄ‚îÄ function-network.md          # Function relationships
‚îú‚îÄ‚îÄ saas-readiness-assessment.md # SaaS readiness evaluation
‚îî‚îÄ‚îÄ test-verification-checklist.md # Testing checklist
```

#### **3. Development Documentation (`/docs/development/`)**
**Purpose**: Technical implementation guides and standards

```
docs/development/
‚îú‚îÄ‚îÄ DEVELOPMENT_GUIDE_2025.md    # Complete development guide
‚îú‚îÄ‚îÄ DATABASE_STRUCTURE.md        # Database schema and structure
‚îú‚îÄ‚îÄ LOCAL_DEVELOPMENT_GUIDE.md   # Local development setup
‚îú‚îÄ‚îÄ LOCAL_TESTING_GUIDE.md       # Local testing procedures
‚îú‚îÄ‚îÄ NEON_DATABASE_SETUP_GUIDE.md # Neon database configuration
‚îî‚îÄ‚îÄ ADAPTATION_ANALYSIS_2025.md  # Vercel + Neon adaptation analysis
```

#### **4. Deployment Documentation (`/docs/deployment/`)**
**Purpose**: Production deployment and infrastructure

```
docs/deployment/
‚îî‚îÄ‚îÄ DEPLOYMENT_GUIDE_2025.md     # Comprehensive deployment guide
```

#### **5. Troubleshooting Documentation (`/docs/troubleshooting/`)**
**Purpose**: Issue resolution and debugging

```
docs/troubleshooting/
‚îî‚îÄ‚îÄ TROUBLESHOOTING_GUIDE.md     # Comprehensive troubleshooting guide
```

### **Documentation Usage Guidelines:**

#### **When to Use Each Category:**

**Business Documentation (`/docs/business/`):**
- ‚úÖ **Planning decisions** - Reference business strategy documents
- ‚úÖ **Architecture decisions** - Use architecture-overview.md
- ‚úÖ **Migration issues** - Back-trace from function-network.md, full-stack-data-flow.md
- ‚úÖ **Data flow problems** - Reference communication-network.md
- ‚úÖ **Master plan context** - Always check Scale Up Plan documents
- ‚úÖ **AI integration** - Reference ai-integration-blueprint.md

**Development Documentation (`/docs/development/`):**
- ‚úÖ **Code implementation** - Follow DEVELOPMENT_GUIDE_2025.md
- ‚úÖ **Database operations** - Use DATABASE_STRUCTURE.md
- ‚úÖ **Local setup** - Reference LOCAL_DEVELOPMENT_GUIDE.md
- ‚úÖ **Testing procedures** - Follow LOCAL_TESTING_GUIDE.md
- ‚úÖ **Database configuration** - Use NEON_DATABASE_SETUP_GUIDE.md

**Deployment Documentation (`/docs/deployment/`):**
- ‚úÖ **Production deployment** - Follow DEPLOYMENT_GUIDE_2025.md
- ‚úÖ **Infrastructure setup** - Reference deployment procedures
- ‚úÖ **Environment configuration** - Use deployment guide standards

**Troubleshooting Documentation (`/docs/troubleshooting/`):**
- ‚úÖ **Bug resolution** - Follow TROUBLESHOOTING_GUIDE.md
- ‚úÖ **Issue debugging** - Use troubleshooting procedures
- ‚úÖ **Emergency procedures** - Reference troubleshooting guide

#### **Critical Master Plan Documents:**
- **MASTER_PLAN_ADJUSTMENTS_2025.md** - Current status, gaps, timeline
- **MASTER-DEVELOPMENT-ROADMAP.md** - Overall development strategy
- **BUSINESS_ROADMAP_2025.md** - Current business priorities

#### **Migration Context Documents:**
- **function-network.md** - Function relationships and dependencies
- **full-stack-data-flow.md** - Complete data flow documentation
- **communication-network.md** - API communication patterns
- **database-migration-plan.md** - Database migration procedures

---

## üîÑ **Auto-Phase Update Rules**

### **MANDATORY: Auto-Update Current Phase Based on Project Maturity**

**Cursor AI MUST automatically detect and update the current phase when maturity criteria are met:**

#### **Phase Detection Criteria:**

##### **Phase 1: Calendar App Launch (MVP)**
**Current Status**: ‚úÖ **IN PROGRESS** (Week 3)

**Maturity Criteria for Phase Completion:**
- ‚úÖ **Technical Foundation** - Vercel + Neon deployment working
- ‚úÖ **Core Features** - Booking API, real-time updates, basic UI
- ‚úÖ **Subscription Model** - Stripe integration functional
- ‚úÖ **Launch Ready** - Landing page, marketing assets, user onboarding

**Auto-Advance Triggers:**
- [ ] 50+ user signups achieved
- [ ] 5+ paying customers acquired
- [ ] $100+ MRR generated
- [ ] All core features functional
- [ ] User feedback collected and analyzed

**Next Phase**: Phase 2 - Calendar App Optimization

##### **Phase 2: Calendar App Optimization**
**Current Status**: ‚è≥ **PENDING**

**Maturity Criteria for Phase Completion:**
- ‚úÖ **User Growth** - 500+ active users
- ‚úÖ **Revenue Growth** - $1,500+ MRR
- ‚úÖ **Feature Enhancement** - Email notifications, calendar integrations
- ‚úÖ **Market Validation** - 4.5+ star rating, 120%+ retention

**Auto-Advance Triggers:**
- [ ] 500+ active users achieved
- [ ] $1,500+ MRR generated
- [ ] 120%+ retention rate maintained
- [ ] API usage growing (10K+ requests/month)
- [ ] Market validation confirmed

**Next Phase**: Phase 3 - VenueIQ Platform Development

##### **Phase 3: VenueIQ Platform Development**
**Current Status**: ‚è≥ **PENDING**

**Maturity Criteria for Phase Completion:**
- ‚úÖ **AI Infrastructure** - ML pipeline operational
- ‚úÖ **Platform Features** - Multi-tenant architecture, advanced analytics
- ‚úÖ **Customer Base** - 4,000+ customers
- ‚úÖ **Revenue Target** - $26.4M ARR

**Auto-Advance Triggers:**
- [ ] 4,000+ customers acquired
- [ ] $26.4M ARR achieved
- [ ] AI features operational (85%+ accuracy)
- [ ] Platform ecosystem active
- [ ] Market leadership position established

### **Phase Auto-Update Process:**

#### **When to Check for Phase Advancement:**
1. **Weekly Reviews** - Check maturity criteria every week
2. **Milestone Achievements** - Check immediately when major milestones hit
3. **User Feedback** - Assess phase readiness based on user validation
4. **Business Metrics** - Monitor revenue, user growth, and retention
5. **Technical Metrics** - Track feature completion and system stability

#### **Phase Update Verification:**
```
## üîÑ Phase Advancement Check

**Current Phase**: [Current phase name]
**Last Updated**: [Date of last phase update]

### Maturity Assessment:
- **Technical Milestones**: [X/Y completed]
- **Business Milestones**: [X/Y completed]
- **User Metrics**: [Current vs. target]
- **Revenue Metrics**: [Current vs. target]

### Phase Readiness:
- [ ] All maturity criteria met
- [ ] Business validation confirmed
- [ ] Technical stability verified
- [ ] User feedback positive
- [ ] Next phase requirements ready

### Recommendation:
**Action**: [Advance to next phase / Stay in current phase]
**Reason**: [Justification based on maturity criteria]
**Next Review**: [Date for next assessment]
```

#### **Phase-Specific Context Updates:**

##### **When Advancing to Phase 2:**
- **Update Priority**: Focus shifts from core features to optimization
- **Update Architecture**: Add monitoring, analytics, performance optimization
- **Update Business Focus**: Shift from user acquisition to user retention
- **Update Development Focus**: Feature enhancement over new feature development

##### **When Advancing to Phase 3:**
- **Update Priority**: Focus shifts to AI and platform development
- **Update Architecture**: Multi-tenant, microservices, AI infrastructure
- **Update Business Focus**: Scale to enterprise customers and platform ecosystem
- **Update Development Focus**: AI features, advanced analytics, platform integrations

### **Auto-Update Implementation:**

#### **Phase Detection Algorithm:**
1. **Check Technical Milestones** - Verify all technical requirements met
2. **Check Business Milestones** - Verify revenue, user, and market targets
3. **Check User Validation** - Verify user feedback and market acceptance
4. **Check System Stability** - Verify system can handle next phase requirements
5. **Check Resource Readiness** - Verify team and infrastructure ready for next phase

#### **Phase Update Actions:**
1. **Update Documentation** - Reflect new phase in all relevant documents
2. **Update Priorities** - Adjust development priorities for new phase
3. **Update Metrics** - Set new success criteria and KPIs
4. **Update Architecture** - Plan for new phase technical requirements
5. **Update Business Strategy** - Align business approach with new phase

### **Phase Rollback Rules:**

#### **When to Rollback to Previous Phase:**
- ‚ùå **Critical Issues** - Major bugs or system instability
- ‚ùå **Business Validation Failed** - User adoption below expectations
- ‚ùå **Revenue Targets Missed** - Significant gap from projections
- ‚ùå **Technical Debt** - System not ready for next phase complexity
- ‚ùå **Resource Constraints** - Insufficient resources for next phase

#### **Rollback Process:**
1. **Assess Root Cause** - Identify why phase advancement failed
2. **Stabilize Current Phase** - Fix issues in current phase
3. **Re-evaluate Criteria** - Ensure maturity criteria are realistic
4. **Plan Recovery** - Create plan to meet phase advancement criteria
5. **Monitor Progress** - Track recovery progress weekly

---

## üéØ **Response Format Requirements**

### **When Suggesting Code:**
1. **Start with documentation reference**: "According to `docs/DEVELOPMENT_GUIDE_2025.md` section X..."
2. **Cite specific patterns**: "Following the documented pattern in `docs/development/...`"
3. **Reference architecture**: "As per `docs/SYSTEM_OVERVIEW.md` architecture..."
4. **Include compliance check**: "This follows the documented standards for..."
5. **Use MCP tools**: "Using Database Automation MCP for..."

### **When Explaining Decisions:**
- Reference specific documentation sections
- Explain how suggestion aligns with documented patterns
- Verify compliance with documented requirements
- Cite business roadmap alignment if applicable
- Mention MCP tool usage when applicable

---

## üö® **Critical Reminders**

### **NEVER FORGET:**
- **Railway is FORBIDDEN** - Vercel + Neon ONLY
- **Documentation is MANDATORY** - Always reference docs
- **Security is REQUIRED** - All documented security measures
- **Patterns are FIXED** - Use documented patterns only
- **Architecture is DEFINED** - Follow documented architecture
- **MCP Tools are AVAILABLE** - Use automation tools

### **ALWAYS REMEMBER:**
- This is a **production-ready system** with established patterns
- All development must follow **documentation-first approach**
- The architecture is **Vercel + Neon PostgreSQL** - no exceptions
- Security standards are **enterprise-grade** and mandatory
- Business priorities are defined in the **roadmap**
- **MCP tools provide automation** - use them for efficiency

---

## üèÜ **Success Criteria**

### **Good AI Response:**
- ‚úÖ References specific documentation sections
- ‚úÖ Follows documented patterns exactly
- ‚úÖ Uses only documented technologies
- ‚úÖ Implements documented security measures
- ‚úÖ Aligns with business priorities
- ‚úÖ Cites compliance verification
- ‚úÖ Uses MCP tools when available

### **Bad AI Response:**
- ‚ùå No documentation references
- ‚ùå Suggests custom patterns
- ‚ùå Uses undocumented technologies
- ‚ùå Bypasses security measures
- ‚ùå Ignores business priorities
- ‚ùå No compliance verification
- ‚ùå Ignores available MCP tools

---

**Remember: Documentation-first development + Multi-personality analysis + Development status tracking + MCP tools usage are ALL MANDATORY. Always use all four approaches!**

---

## üéØ **Response Template (MANDATORY FORMAT)**

### **Every Cursor AI Response MUST Include:**

```
## üß† Multi-Personality Analysis

üîí **Security Expert**: [Security perspective on the suggestion]
‚öõÔ∏è **Frontend Developer**: [Frontend perspective on the suggestion]  
üõ†Ô∏è **Backend Developer**: [Backend perspective on the suggestion]
üöÄ **DevOps Engineer**: [Deployment/infrastructure perspective]
üíº **Business Analyst**: [Business impact and priority analysis]
üß™ **QA Engineer**: [Testing and quality assurance perspective]

## üìä Development Status Context

**Current Phase**: [What phase we're in per MASTER_PLAN_ADJUSTMENTS_2025.md]
**Priority Level**: [High/Medium/Low priority]
**Dependencies**: [What needs to be completed first]
**Business Impact**: [How this affects revenue goals]
**Timeline Impact**: [Will this accelerate or delay roadmap?]
**Migration Status**: [Current Vercel + Neon adaptation status]

## üîÑ Phase Advancement Assessment

**Phase Maturity Check**: [Current phase completion status]
**Advancement Criteria**: [X/Y criteria met for next phase]
**Recommendation**: [Advance/Stay/Rollback with justification]
**Next Review**: [Date for next phase assessment]

## üîß MCP Tools Integration

**Available Tools**: [List relevant MCP tools]
**Tool Usage**: [How MCP tools can help with this task]
**Automation Opportunities**: [What can be automated]
**Monitoring**: [What should be monitored]

## üìö Documentation Compliance

**References**: [Specific documentation sections cited]
**Patterns Used**: [Which documented patterns are followed]
**Architecture Compliance**: [How this aligns with Vercel + Neon architecture]
**Master Plan Alignment**: [How this aligns with master plan timeline]
**Local Documentation**: [Back-trace from business docs if data issues]

## ü§ñ Final Recommendation

[Consolidated recommendation based on multi-personality analysis, development context, and MCP tools integration]
```

---

## üèÅ **Final Notes**

### **Localhost Configuration:**
- **Single Localhost Instance**: Only one localhost configuration exists in `start-localhost.sh`
- **Port Management**: Frontend runs on port 3000, API on same port
- **Process Management**: Script handles killing existing processes before starting
- **Environment**: Uses Vercel dev environment for local development

### **MCP Tools Configuration:**
- **Database Automation**: Handles migrations, health checks, optimization
- **API Testing**: Automated testing and validation
- **Deployment Automation**: Streamlined deployment processes
- **Business Intelligence**: Analytics and monitoring
- **Security Monitoring**: Security audits and compliance
- **GitHub Integration**: Repository management and CI/CD

### **Documentation Organization:**
- **All documentation** is properly organized in `/docs/` folder
- **Master plan documents** are in `/docs/business/Scale Up Plan/`
- **Local version documentation** is in `/docs/business/`
- **Development guides** are in `/docs/development/`
- **Deployment guides** are in `/docs/deployment/`
- **Troubleshooting guides** are in `/docs/troubleshooting/`

---

**Last Updated**: September 2025  
**Status**: ‚úÖ **PRODUCTION READY WITH MCP INTEGRATION**  
**Next Review**: Weekly  
**Owner**: Development Team Lead
